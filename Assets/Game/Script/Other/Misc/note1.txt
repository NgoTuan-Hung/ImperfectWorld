IEnumerator TriggerCoroutine(Vector2 location, Vector2 direction)
    {
        customMono.statusEffect.ccImmune = true;

        /* The idea is jumping along a bezier curve, with p1 is our location, p2 is the control point
        , p3 is the destination. mid is the mid point between p1 and p3, and p2-mid is basically
        a perpendicular bisector of p1 and p3, with the same length as p1-p3, which ensures
        the curve is smooth.*/
        p1 = transform.position;
        p3 = location;
        mid = (p1 + p3) / 2;
        p2 = p3 - p1;
        p2 = p2.RotateZ(angle) + mid;

        customMono.SetUpdateDirectionIndicator(direction, UpdateDirectionIndicatorPriority.Low);

        t = 0;
        while (t < duration)
        {
            oneMinusT = 1 - t;
            /* quadratic bezier formula */
            transform.position = oneMinusT * oneMinusT * p1 + 2 * t * oneMinusT * p2 + t * t * p3;

            yield return new WaitForSeconds(Time.fixedDeltaTime);
            t += moveLength;
        }

        customMono.statusEffect.ccImmune = false;
        customMono.currentActionInterruptHandler = InterruptHandler;

        /* After we finish jumping, we can delay to land for a short time. */
        ToggleAnim(boolHash, false);
        ToggleAnim(landBoolHash, true);
        customMono.audioSource.PlayOneShot(audioClip);

        yield return new WaitForSeconds(landDelay);
        ToggleAnim(landBoolHash, false);
        customMono.actionBlocking = false;
        customMono.movementActionBlocking = false;
    }

void InterruptHandler()
    customMono.actionBlocking = false;
    customMono.movementActionBlocking = false;
    ToggleAnim(landBoolHash, false);
    StopCoroutine(actionCoroutine);

void KnockUp()
    if (ccImmune)
        ...
    else
        customMono.currentActionInterruptHandler()
        

IEnumerator KnockUpIE()
    customMono.actionBlocking = true;
    customMono.movementActionBlocking = true;
    ...
    customMono.actionBlocking = false;
    customMono.movementActionBlocking = false;





